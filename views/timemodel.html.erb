
<script src='//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js' type='text/javascript'></script>
<script src='//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min.js' type='text/javascript'></script>
<script src='//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js' type='text/javascript'></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc1/js/bootstrap.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc1/css/bootstrap.min.css"></link>

<style>

#slider{
  position: fixed;
  bottom: 50px;
}

#time-container{
  width: 12%;
  height: 100%;
  padding-right: 0px;
  position:absolute;
}

#server-container{
  width:12%;
  height: 100%;
  padding-left: 0px;
  position: absolute;
  left: 12%;
}

#container {
  margin:2%;
  padding:20px;
  border:2px solid #d0d0d0;
  border-radius: 5px;
  }

#container-container{
  position: absolute;  
  left: 24%;
  width: 74%;
  height: 90%;
}

.selected{
  background-color: #D9EDF7;
  fill: blue;
}

.list-group{
  width:100%;
  height: 100%;
  outline: 1px black;
  overflow: auto;
}

svg{
  display: block;
  width: 100%;
  margin: 0 auto;
  fill: none;
  stroke: black;
  pointer-events: all;
}

.node {
  fill: white;
  stroke:black;
  z-index: 4;
}

.node text{
  fill: black;
  font-size: 12;
  color: black;
  z-index: 5;
}

.cursor {
  fill: none;
  stroke: none;
  pointer-events: none;
}

.link {
  stroke: #999;
  z-index: 4;
}

</style>

<!-- <script src='/public/js/script.js'></script> -->

<script type='text/template' id='template-timemodel'>
  Time = <%= time %>
</script>

<body onload="sizeChange()">

  <div id='time-container' >
    <div class="list-group">
      <li class="list-group-item">Time</li>
    </div>
  </div>

  <div id='server-container' >
    <div class="list-group">
      <li class="list-group-item">Servers</li>
    </div>
  </div>

  <div id="container-container">
    <div id='container'>
    </div>
  </div>

  <script type='text/javascript'>

    var TimemodelApp = {
      Models: {},
      Collections: {},
      Views: {},
      Templates: {}
    };

    TimemodelApp.Models.Timemodel = Backbone.Model.extend({
      defaults: {
      
      },
      initialize: function(){

      }
    });

    TimemodelApp.Models.Node = Backbone.Model.extend({
      defaults: {
      },
      initialize: function(){

      }
    });

    var TimemodelCollection = Backbone.Collection.extend({
      model: TimemodelApp.Models.Timemodel,
      url: "/api/timemodel"
    });

    var NodesCollection = Backbone.Collection.extend({
      initialize: function(models, options){
        this.id = options.id
      },
      model: TimemodelApp.Models.Node,
      url: function(){
        return '/api/timemodel/' + this.id + '/nodes'
      }
    })

    var ConnectedNodesCollection = Backbone.Collection.extend({
      initialize: function(models, options){
        this.id = options.id
        this.node_name = options.node_name
      },
      model: TimemodelApp.Models.Node,
      url: function(){
        return '/api/timemodel/' + this.id + '/node/' + this.node_name
      }
    })

    var TimemodelView1 = Backbone.View.extend({
      el: $('body'),
      events: {
        'click #time-container .list-group a': 'buttonClick',
        'click #server-container .list-group a': 'nodeButtonClick'
      },
      initialize: function(){
        _.bindAll(this, 'render')
        this.render();
      },
      render: function(){

        fetch.done(function(){

          main_collection.forEach(function(model){
            $(this.el).append("This is the time " + model.get('time'));
            $('#time-container .list-group').append("<a href='#' class='list-group-item' class='test_button' data-id='" + model.get('_id') + "'>" + model.get('time') + "</a>")
          })

          $('#timemodel-container').html($(this.el).html());
          return this;
        })
      },
      buttonClick: function(e){
        var collectionID = $(e.currentTarget).data("id") // get id of current button

        nodesCollection = new NodesCollection([], {id: collectionID});
        getNodes = nodesCollection.fetch();
     
        getNodes.done(function(){

          $('#server-container .list-group a').remove()

          nodesCollection.forEach(function(node){
            $(this.el).append("This is the hostname " + node.get('hostname'));
            $('#server-container .list-group').append("<a href='#' class='list-group-item' data-name='"+ node.get('hostname') + "' data-timeid='" + node.get('timemodel_id') + "'>" + node.get('hostname') + "</a>");
          })

        })
      },

      // Will toggle if the button has been selected or not
      // If selected, will delect and remove node
      // If not selected, will select, add node, fetch it's connections
      // and add it's connections
      nodeButtonClick: function(e){
        current = $(e.currentTarget)

        var connectedid = current.data("timeid") // get id of current button
        var name = current.data("name") //get current hostname

        //toggle selected
        current.toggleClass('selected');

        //if the node has been selected
        if(current.hasClass('selected') == true){
          //Add node
          add(name);

          //fetch it's connections
          var connectedNodesCollection = new ConnectedNodesCollection([],{id: connectedid, node_name: name })
          getConnected = connectedNodesCollection.fetch()
          getConnected.done(function(){

            connectedNodesCollection.forEach(function(edge){

              //add it's connections
              if(edge.get('toID') === name)
                add(edge.get('fromID'), edge.get('toID'))
              else if(edge.get('fromID') === name)
                add(edge.get('toID'), edge.get('fromID'))

            })
          })
        }
        // if the node is not selected
        else{
          remove(name)
        }
      }
    });

    var main_collection = new TimemodelCollection();
    var fetch = main_collection.fetch({update: true, merge: false, remove: false, add: true});
    var nodesCollection

    var timemodelView1 = new TimemodelView1();
  </script>


  <!-- d3 script begins here -->
  <script>

    d3.select(window)
          .on("resize", sizeChange);

    var fill = d3.scale.category20();

    var force = d3.layout.force()
        // .size([width, height])
        .nodes([]) // initialize with a single node
        .linkDistance(250)
        .charge(-60)
        .on("tick", tick)
        .linkDistance(100)
        .gravity(.01);

    var svg = d3.select("#container")
        .append("svg")
        .append("g")
        .attr("class", "svg-container")
        .on("mousemove", mousemove);

    var nodes = force.nodes(),
        links = force.links(),
        rect = svg.append('svg:g').selectAll("g"),
        link = svg.append('svg:g').selectAll(".link");

    var cursor = svg.append("circle")
        .attr("r", 30)
        .attr("transform", "translate(-100,-100)")
        .attr("class", "cursor");

    var node_drag = d3.behavior.drag()
        .on("dragstart", dragstart)
        .on("drag", dragmove)
        .on("dragend", dragend);

    function sizeChange() {
      d3.select(".svg-container").attr("transform", "scale(" + $("#container").width()/900 + ")");
      // $("svg").height($("#container").width()*0.618);
    }


    //following three functions dragstart, dragmove and dragend
    // will allow nodes to be "held" in place when you click them
    function dragstart(d, i) {
      force.stop() // stops the force auto positioning before you start dragging
    }

    function dragmove(d, i) {
        d.px += d3.event.dx;
        d.py += d3.event.dy;
        d.x += d3.event.dx;
        d.y += d3.event.dy; 
        tick(); // this is the key to make it work together with updating both px,py,x,y on d !
    }

    function dragend(d, i) {
        d.fixed = true; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
        tick();
        force.resume();
    }

    //adds the node and the connection if it does not exist
    //if the node exists and the taget exists, adds only the connection
    function add(nodeName, connection){
      var bool = new Boolean(); // boolean to 
      bool = false

      nodes.forEach(function(target) {
        if(target.name == nodeName){ // if the node does not exist
          bool = true
        }
      });

      if(bool == false){ //if the node does not exist
        var node = {x: 200, y: 200, name: nodeName}, //push it to nodes
        n = nodes.push(node);

        // add links to any nearby nodes
        nodes.forEach(function(target) {
          if(connection === target.name){
            links.push({source: node, target: target});
          }
        });      
        restart();    
      }
      else if(bool == true){ //even if you don't add the node, you want to add new links on that node
        var from = null,
            to = null;

        nodes.forEach(function(target){
          if(target.name == nodeName){
            from = target;
          }
          else if(target.name == connection){
            to = target;
          }
        });

        if(from != null && to != null){ // if both the to and the from exist, create that connection
          links.push({source: from, target: to});
        };

        restart();

      };
    }

    //removes the node and any links that connect to that node, 
    // does not remove connecting nodes.
    function remove(nodeName){
      //find the node that you want to remove
      nodes.forEach(function(target, index){
        if(target.name == nodeName){
          nodes.splice(index, 1);
          // swap();

          $(this).addClass("toRemove")
        };
      });

      //Iterate in reverse. This way the indeces do not change
      //as you iterate through and you can see/remove all the links.
      //The indeces will change for the links "behind" the current link,
      //that is, all of the links that you have already checked.
      //This is also the reason a forEach was not used
      for(var i = links.length -1; i >= 0; i--){
        line = links[i]

        if(line.source.name == nodeName){
          links.splice(i, 1);
        }
        else if(line.target.name == nodeName){
          links.splice(i, 1);
        }
      }
      //redraw the nodes
      restart();
    }

    function mousemove() {
      cursor.attr("transform", "translate(" + d3.mouse(this) + ")");
    }

    function tick() {
      link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

      rect.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    }

    function restart() {

      link = link.data(links);

      link.exit().remove();

      link.enter().insert("line", ".node").attr("class", "link");

      rect = rect.data(nodes, function(d){return d.name})

      var g = rect.enter().append('svg:g');

      g.attr("class", "node")
      .call(node_drag);

      g.append("rect", ".cursor")
      .attr("height", 20)
      .attr("width", 50);

      g.append("svg:text")
      .attr("x", 10)
      .attr("dy", ".31em")
      .text(function(target){
        return target.name;
      })

      rect.exit().remove();

      force.start();
    }
  </script>

</body>