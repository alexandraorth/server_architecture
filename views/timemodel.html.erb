
<script src='//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js' type='text/javascript'></script>
<script src='//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min.js' type='text/javascript'></script>
<script src='//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js' type='text/javascript'></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/js/bootstrap.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<link href="http://twitter.github.com/bootstrap/2.3.2/assets/css/bootstrap.css" rel="stylesheet"></link>

<style>

rect {
  fill: none;
  stroke: black;
  pointer-events: all;
}

.node {
  fill: #000;
}

.cursor {
  fill: none;
  stroke: none;
  pointer-events: none;
}

.link {
  stroke: #999;
}

</style>

<!-- <script src='/public/js/script.js'></script> -->

<script type='text/template' id='template-timemodel'>
  Time = <%= time %>
</script>

<div id='button_container'></div>

<div class="btn-group">
  <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
    filter by section
    <span class="caret"></span>
  </a>
  <ul class="dropdown-menu">
  <!-- buttons get appended here -->  
 </ul>
</div>

<div id='edge_container'></div>

<script type='text/javascript'>

  var TimemodelApp = {
    Models: {},
    Collections: {},
    Views: {},
    Templates: {}
  };

  TimemodelApp.Models.Timemodel = Backbone.Model.extend({
    defaults: {
    
    },
    initialize: function(){

    }
  });

  TimemodelApp.Models.Node = Backbone.Model.extend({
    defaults: {
    },
    initialize: function(){

    }
  });

  var TimemodelCollection = Backbone.Collection.extend({
    model: TimemodelApp.Models.Timemodel,
    url: "/api/timemodel"
  });

  var NodesCollection = Backbone.Collection.extend({
    initialize: function(models, options){
      this.id = options.id
    },
    model: TimemodelApp.Models.Node,
    url: function(){
      return '/api/timemodel/' + this.id + '/nodes'
    }
  })

  var ConnectedNodesCollection = Backbone.Collection.extend({
    initialize: function(models, options){
      this.id = options.id
      this.node_name = options.node_name
    },
    model: TimemodelApp.Models.Node,
    url: function(){
      return '/api/timemodel/' + this.id + '/node/' + this.node_name
    }
  })

  var TimemodelView1 = Backbone.View.extend({
    el: $('body'),
    events: {
      'click #button_container button': 'buttonClick',
      'click .dropdown-menu a': 'nodeButtonClick'
    },
    initialize: function(){
      _.bindAll(this, 'render')
      this.render();
    },
    render: function(){

      fetch.done(function(){

        main_collection.forEach(function(model){
          $(this.el).append("This is the time " + model.get('time'));
          $('#button_container').append("<button class='test_button' data-id='" + model.get('_id') + "'>" + model.get('time') + "</button>")
        })

        $('#timemodel-container').html($(this.el).html());
        return this;
      })
    },
    buttonClick: function(e){
      var collectionID = $(e.currentTarget).data("id") // get id of current button

      nodesCollection = new NodesCollection([], {id: collectionID});
      getNodes = nodesCollection.fetch();
   
      getNodes.done(function(){

        nodesCollection.forEach(function(node){
          $(this.el).append("This is the hostname " + node.get('hostname'));
          $('.dropdown-menu').append("<li><a href='#' data-name='"+ node.get('hostname') + "' data-timeid='" + node.get('timemodel_id') + "'>" + node.get('hostname') + "</a></li>")

          console.log("<li><a href='#' data-name='"+ node.get('hostname') + "' data-timeid='" + node.get('timemodel_id') + "'>" + node.get('hostname') + "</a></li>")
        })

      })
    },

    nodeButtonClick: function(e){
      console.log("this is the hostname " + $(e.currentTarget).data("name"))
      console.log("this is the id " + $(e.currentTarget).data("timeid"))

      var connectedid = $(e.currentTarget).data("timeid") // get id of current button
      var name = $(e.currentTarget).data("name") //get current hostname

      clicked(name);

      var connectedNodesCollection = new ConnectedNodesCollection([],{id: connectedid, node_name: name })
      getConnected = connectedNodesCollection.fetch()
      getConnected.done(function(){

        connectedNodesCollection.forEach(function(edge){
          $(this.el).append("From" + edge.get('fromID') + "To" + edge.get('toID'));
          $('#edge_container').append("<h5>From: " + edge.get('fromID') + "    To: " + edge.get('toID') + "</h5>")
        
          clicked(edge.get('toID'))

        })

      })
    }

  });

  var main_collection = new TimemodelCollection();
  var fetch = main_collection.fetch({update: true, merge: false, remove: false, add: true});
  var nodesCollection

  var timemodelView1 = new TimemodelView1();
</script>


<!-- d3 script begins here -->
<script>

  var width = 500,
      height = 500;

  var fill = d3.scale.category20();

  var force = d3.layout.force()
      .size([width, height])
      .nodes([{}]) // initialize with a single node
      .linkDistance(30)
      .charge(-60)
      .on("tick", tick);

  var svg = d3.select("body").append("svg")
      .attr("width", width)
      .attr("height", height)
      .on("mousemove", mousemove)
      .on("mousedown", mousedown);

  svg.append("rect")
      .attr("width", width)
      .attr("height", height);

  var nodes = force.nodes(),
      links = force.links(),
      node = svg.selectAll(".node"),
      link = svg.selectAll(".link");

  var cursor = svg.append("circle")
      .attr("r", 30)
      .attr("transform", "translate(-100,-100)")
      .attr("class", "cursor");

  restart();

  function clicked(nodeName){
    var node = {x: 200, y: 200, name: nodeName},
    n = nodes.push(node);

    console.log("this is the nodeName")
    console.log(nodeName)

    console.log("this is the node in clicked")
    console.log(node)

    // add links to any nearby nodes
    nodes.forEach(function(target) {
      var x = target.x - node.x,
          y = target.y - node.y;
      if (Math.sqrt(x * x + y * y) < 30) {
        links.push({source: node, target: target});
      }
    });


    restart();
  }

  function mousemove() {
    cursor.attr("transform", "translate(" + d3.mouse(this) + ")");
  }

  function mousedown() {
    var point = d3.mouse(this),
        node = {x: point[0], y: point[1]},
        n = nodes.push(node);

    console.log("this is the point: ")
    console.log(point)

    console.log(node)

    // add links to any nearby nodes
    nodes.forEach(function(target) {
      var x = target.x - node.x,
          y = target.y - node.y;
      if (Math.sqrt(x * x + y * y) < 30) {
        links.push({source: node, target: target});
      }
    });

    restart();
  }

  function tick() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

  function restart() {
    console.log("this is the node in restart")
    console.log(node)

    link = link.data(links);

    link.enter().insert("line", ".node")
        .attr("class", "link");

    node = node.data(nodes);

    console.log("this is the second node in restart")
    console.log(node)

    node.enter().insert("circle", ".cursor")
        .attr("class", "node")
        .attr("r", 5)
        .call(force.drag);

    force.start();
  }


</script>